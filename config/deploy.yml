# Name of your application. Used to uniquely configure containers.
service: buildxwork

# Name of the container image.
image: tanmer/buildxwork

# Use a different ssh user than root
ssh:
  user: <%= ENV.fetch('KAMAL_SSH_USER', 'ubuntu') %>
<% if ENV['KAMAL_SSH_PROXY'].to_s.strip.length > 0 %>
  proxy: <%= ENV['KAMAL_SSH_PROXY'] %>
<% end %>

# Deploy to these servers.
servers:
  web:
    hosts:
    - <%= ENV.fetch('KAMAL_SERVER_IP') %>
    labels:
      namespace: buildxwork
      traefik.enable: "true"
      traefik.http.routers.buildxwork-web.rule: "Host(`buildxwork.devops.tanmer.com`)"
      traefik.http.routers.buildxwork-web.tls: true
      traefik.http.routers.buildxwork-web.middlewares: "default@file,buildxwork-web-retry@docker"
      traefik.http.routers.buildxwork-web.entryPoints: "https"
    options:
      network: tanmer

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: registry.devops.tanmer.com
  username: tanmer

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    WEB_CONCURRENCY: 2
  secret:
    - RAILS_MASTER_KEY
    - SENTRY_DSN

volumes:
  - buildxwork-storage:/rails/storage

# Configure builder setup.
builder:
  multiarch: false
  args:
    GIT_COMMIT: <%= ENV['GIT_COMMIT'] %>
    GIT_TAG: <%= ENV['GIT_TAG'] %>
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

# Configure custom arguments for Traefik
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
